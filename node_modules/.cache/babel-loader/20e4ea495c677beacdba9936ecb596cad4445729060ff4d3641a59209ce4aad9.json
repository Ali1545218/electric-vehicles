{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ali Murtaza\\\\Desktop\\\\PROJECT\\\\electric-vehicles\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { loadCSVData } from \"./data/csvLoader\";\nimport { BarChart, Bar, PieChart, Pie, Tooltip, XAxis, YAxis, Legend, Cell, ResponsiveContainer } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7f50', '#a4de6c'];\nconst App = () => {\n  _s();\n  const [evData, setEvData] = useState([]);\n  const [brandDistribution, setBrandDistribution] = useState([]);\n  useEffect(() => {\n    loadCSVData(\"/ev_data.csv\").then(data => {\n      setEvData(data);\n      computeBrandDistribution(data);\n    });\n  }, []);\n  const computeBrandDistribution = data => {\n    const counts = {};\n    data.forEach(item => {\n      const brand = item.Manufacturer;\n      counts[brand] = (counts[brand] || 0) + 1;\n    });\n    const total = data.length;\n    const sorted = Object.entries(counts).sort((a, b) => b[1] - a[1]).slice(0, 5); // Top 5 brands\n\n    const topBrands = sorted.map(([brand, count]) => ({\n      name: brand,\n      value: count\n    }));\n    const othersCount = total - sorted.reduce((acc, [_, count]) => acc + count, 0);\n    if (othersCount > 0) {\n      topBrands.push({\n        name: \"Other\",\n        value: othersCount\n      });\n    }\n    setBrandDistribution(topBrands);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 30\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"EV Analytics Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Brand Distribution\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(PieChart, {\n        children: [/*#__PURE__*/_jsxDEV(Pie, {\n          data: brandDistribution,\n          cx: \"50%\",\n          cy: \"50%\",\n          labelLine: false,\n          label: ({\n            name,\n            percent\n          }) => `${name}: ${(percent * 100).toFixed(1)}%`,\n          outerRadius: 120,\n          fill: \"#8884d8\",\n          dataKey: \"value\",\n          children: brandDistribution.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n            fill: COLORS[index % COLORS.length]\n          }, `cell-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"mQLcala2ug4gQ1acQFOPeh7RQN8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","loadCSVData","BarChart","Bar","PieChart","Pie","Tooltip","XAxis","YAxis","Legend","Cell","ResponsiveContainer","jsxDEV","_jsxDEV","COLORS","App","_s","evData","setEvData","brandDistribution","setBrandDistribution","then","data","computeBrandDistribution","counts","forEach","item","brand","Manufacturer","total","length","sorted","Object","entries","sort","a","b","slice","topBrands","map","count","name","value","othersCount","reduce","acc","_","push","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","cx","cy","labelLine","label","percent","toFixed","outerRadius","fill","dataKey","entry","index","_c","$RefreshReg$"],"sources":["C:/Users/Ali Murtaza/Desktop/PROJECT/electric-vehicles/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { loadCSVData } from \"./data/csvLoader\";\nimport {\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Tooltip,\n  XAxis,\n  YAxis,\n  Legend,\n  Cell,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7f50', '#a4de6c'];\n\nconst App = () => {\n  const [evData, setEvData] = useState([]);\n  const [brandDistribution, setBrandDistribution] = useState([]);\n\n  useEffect(() => {\n    loadCSVData(\"/ev_data.csv\").then((data) => {\n      setEvData(data);\n      computeBrandDistribution(data);\n    });\n  }, []);\n\n  const computeBrandDistribution = (data) => {\n    const counts = {};\n    data.forEach((item) => {\n      const brand = item.Manufacturer;\n      counts[brand] = (counts[brand] || 0) + 1;\n    });\n\n    const total = data.length;\n    const sorted = Object.entries(counts)\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 5); // Top 5 brands\n\n    const topBrands = sorted.map(([brand, count]) => ({\n      name: brand,\n      value: count,\n    }));\n\n    const othersCount =\n      total -\n      sorted.reduce((acc, [_, count]) => acc + count, 0);\n\n    if (othersCount > 0) {\n      topBrands.push({ name: \"Other\", value: othersCount });\n    }\n\n    setBrandDistribution(topBrands);\n  };\n\n  return (\n    <div style={{ padding: 30 }}>\n      <h2>EV Analytics Dashboard</h2>\n\n      <h3>Brand Distribution</h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie\n            data={brandDistribution}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            label={({ name, percent }) =>\n              `${name}: ${(percent * 100).toFixed(1)}%`\n            }\n            outerRadius={120}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n          >\n            {brandDistribution.map((entry, index) => (\n              <Cell\n                key={`cell-${index}`}\n                fill={COLORS[index % COLORS.length]}\n              />\n            ))}\n          </Pie>\n          <Tooltip />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}